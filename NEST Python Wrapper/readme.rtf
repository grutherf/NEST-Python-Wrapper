{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red38\green38\blue38;\red234\green235\blue236;
\red235\green235\blue235;\red27\green31\blue34;\red230\green230\blue230;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c93333\c93725\c94118;
\cssrgb\c93725\c93725\c93725;\cssrgb\c14118\c16078\c18039;\csgray\c92143;\csgray\c0\c0;}
\margl1440\margr1440\vieww15640\viewh9840\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1) install anaconda: https://www.anaconda.com/download/#macos
\f1 \

\f0 2) install boost: 
\f2 \cf3 \cb4 \strokec3 conda install -c anaconda boost
\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0 \cf3 \strokec3 3) look at setup.py
\f1 \cf2 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0

\f0 \cf3 \strokec3 make sure the library name in the line 
\f2 \cb5 libraries=['library_name']
\f0 \cb1  matches the name of your boost python library. So that line will likely need to be 
\f2 \cb5 libraries=['boost_python3']
\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0
\cf3 \strokec3 You can check your boost python name by going to the directory where anaconda is installed and looking for libboost_pythonX.dylib in the lib folder \cf2 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0 \cf3 \strokec3 4) If you want to use a newer version of NEST than is already modified to accept the wrapper, you\'92ll have to modify testNEST.cpp. Look at the already modified version for comments about which pieces of code need to be added or changed.
\f1 \cf2 \strokec2 \

\f0 \cf3 \strokec3 5) use the 
\f2 \cf6 \cb5 \strokec6 python setup.py build_ext --inplace
\f1 \cb1  
\f0 command to make a python module that is now importable
\f1 \cf2 \strokec2 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0 \cf6 \strokec6 	if you get the error \'93
\b .
\b0 /NEST.hh:6:10: fatal error: 'random' file not found
\f1 \cf2 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0

\f0 \cf6 \strokec6 #include <random>\'94, try changing the line in setup.py from 
\f2 \cb5 extra_compile_args[\'91_____\'92]
\f0 \cb1  to \'a0
\f1 \cf2 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0

\f2 \cf6 \cb5 \strokec6 extra_compile_args = ['-O2', '-std=c++11', '-stdlib=libc++','-mmacosx-version-min=10.7']
\f1 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0

\f0 \cf6 \strokec6 Note that this likely only works for macs, but by changing 
\f2 \cb5 '-mmacosx-version-min=10.7'
\f0 \cb1 , it may be applicable to other operating systems.
\f1 \cf2 \strokec2 \
\pard\pardeftab720\sl360\partightenfactor0

\f0 \cf6 \strokec6 6) in python, use 
\f2 \cb5 import wrapper
\f0 \cb1  \'a0to gain access to the wrapper in python
\f1 \cf2 \strokec2 \

\f0 \cf6 \strokec6 7) set some variable 
\f2 \cb5 var = wrapper.nest_py_wrapper()
\f1 \cf2 \cb1 \strokec2 \

\f0 \cf6 \strokec6 8) finally, call 
\f2 \cb7 var1 = var.testNest(\'91dummy\'92, \'85)
\f1 \cb8  to store the results of NEST\cf2 \cb1 \strokec2 \
\pard\pardeftab720\li960\sl360\partightenfactor0

\f0 \cf6 \strokec6 after the dummy variables, pass in the variables asked for in NEST readme with each argument in \'91 \'92 and commas separating arguments.
\f1 \cf2 \strokec2 \
}